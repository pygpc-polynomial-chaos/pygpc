name: Build 

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - python-version: "3.9"
            cibw-string: "cp39-*"
          - python-version: "3.10"
            cibw-string: "cp310-*"
          - python-version: "3.11"
            cibw-string: "cp311-*"
          - python-version: "3.12"
            cibw-string: "cp312-*"
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Cython cibuildwheel twine
        pip install -r requirements.txt
        pip install .
    - name: Test with unittest
      run: |
        cd tests
        python -m unittest
        cd .. 
    - name: Build with cibuildwheel
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        ls wheelhouse/
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
        CIBW_BEFORE_BUILD: "pip install numpy"
        CIBW_BUILD: ${{ matrix.cibw-string }}
        CIBW_SKIP: "*-musllinux_* *i686*"
    - name: Upload with twine
      if: "github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'PyPI')"
      run: |
        python -m twine upload wheelhouse/*.whl
      env:
        TWINE_PASSWORD: ${{ secrets.twine_api_key }}
        TWINE_USERNAME: __token__
  windows:
    runs-on: windows-2022
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - python-version: "3.9"
            cibw-string: "cp39-*"
          - python-version: "3.10"
            cibw-string: "cp310-*"
          - python-version: "3.11"
            cibw-string: "cp311-*"
          - python-version: "3.12"
            cibw-string: "cp312-*"
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Cython cibuildwheel twine
        pip install -r requirements.txt
        pip install .
    - name: Test with unittest
      run: |
        cd tests
        python -m unittest
        cd .. 
    - name: Build with cibuildwheel
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        ls wheelhouse/
      env:
        CIBW_BEFORE_BUILD: "pip install numpy"
        CIBW_BUILD: ${{ matrix.cibw-string }} 
    - name: Upload with twine
      if: "github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'PyPI')"
      run: |
        python -m twine upload wheelhouse/*.whl
      env:
        TWINE_PASSWORD: ${{ secrets.twine_api_key }}
        TWINE_USERNAME: __token__
  macos_arm64:
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - python-version: "3.9"
            cibw-string: "cp39-*"
          - python-version: "3.10"
            cibw-string: "cp310-*"
          - python-version: "3.11"
            cibw-string: "cp311-*"
          - python-version: "3.12"
            cibw-string: "cp312-*"
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        brew install gcc@13
        python -m pip install --upgrade pip
        pip install Cython cibuildwheel twine
        pip install -r requirements.txt
        CC=gcc-13 CXX=g++-13 pip install .
    - name: Test with unittest
      run: |
        cd tests
        python -m unittest
        cd .. 
    - name: Build with cibuildwheel
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        ls wheelhouse/
      env:
        MACOSX_DEPLOYMENT_TARGET: "10.14"
        CIBW_BEFORE_BUILD: "pip install numpy delocate==0.10.7"
        CIBW_BUILD: ${{ matrix.cibw-string }} 
        CIBW_REPAIR_WHEEL_COMMAND: "delocate-listdeps {wheel} && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
        CC: gcc-13
        CXX: g++-13
    - name: Upload with twine
      if: "github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'PyPI')"
      run: |
        python -m twine upload wheelhouse/*.whl
      env:
        TWINE_PASSWORD: ${{ secrets.twine_api_key }}
        TWINE_USERNAME: __token__
  macos_x86_64:
    runs-on: macos-13
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - python-version: "3.9"
            cibw-string: "cp39-*"
          - python-version: "3.10"
            cibw-string: "cp310-*"
          - python-version: "3.11"
            cibw-string: "cp311-*"
          - python-version: "3.12"
            cibw-string: "cp312-*"
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        brew install gcc@13
        python -m pip install --upgrade pip
        pip install Cython cibuildwheel twine
        pip install -r requirements.txt
        CC=gcc-13 CXX=g++-13 pip install .
    - name: Test with unittest
      run: |
        cd tests
        python -m unittest
        cd .. 
    - name: Build with cibuildwheel
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        ls wheelhouse/
      env:
        MACOSX_DEPLOYMENT_TARGET: "10.13"
        CIBW_BEFORE_BUILD: "pip install numpy delocate==0.10.7"
        CIBW_BUILD: ${{ matrix.cibw-string }} 
        CIBW_REPAIR_WHEEL_COMMAND: "delocate-listdeps {wheel} && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
        CC: gcc-13
        CXX: g++-13
    - name: Upload with twine
      if: "github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'PyPI')"
      run: |
        python -m twine upload wheelhouse/*.whl
      env:
        TWINE_PASSWORD: ${{ secrets.twine_api_key }}
        TWINE_USERNAME: __token__
